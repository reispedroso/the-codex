// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using codex_backend.Database;

#nullable disable

namespace codex_backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("codex_backend.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Biography")
                        .HasColumnType("text")
                        .HasColumnName("biography");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Nationality")
                        .HasColumnType("text")
                        .HasColumnName("nationality");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("codex_backend.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("text")
                        .HasColumnName("cover_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<int>("PageCount")
                        .HasColumnType("integer")
                        .HasColumnName("page_count");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("publication_date");

                    b.Property<string>("Publisher")
                        .HasColumnType("text")
                        .HasColumnName("publisher");

                    b.Property<string>("Synposis")
                        .HasColumnType("text")
                        .HasColumnName("synposis");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_books_author_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_books_category_id");

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("codex_backend.Models.BookItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.Property<Guid>("BookstoreId")
                        .HasColumnType("uuid")
                        .HasColumnName("bookstore_id");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("condition");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_book_items");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_book_items_book_id");

                    b.HasIndex("BookstoreId")
                        .HasDatabaseName("ix_book_items_bookstore_id");

                    b.ToTable("book_items", (string)null);
                });

            modelBuilder.Entity("codex_backend.Models.BookReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric")
                        .HasColumnName("rating");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_book_reviews");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_book_reviews_book_id");

                    b.ToTable("book_reviews", (string)null);
                });

            modelBuilder.Entity("codex_backend.Models.Bookstore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_user_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("StoreLogoUrl")
                        .HasColumnType("text")
                        .HasColumnName("store_logo_url");

                    b.Property<string>("Street")
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_bookstores");

                    b.HasIndex("OwnerUserId")
                        .HasDatabaseName("ix_bookstores_owner_user_id");

                    b.ToTable("bookstores", (string)null);
                });

            modelBuilder.Entity("codex_backend.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("codex_backend.Models.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("text")
                        .HasColumnName("currency_code");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<int>("LateDays")
                        .HasColumnType("integer")
                        .HasColumnName("late_days");

                    b.Property<decimal>("LateFeeAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("late_fee_amount");

                    b.Property<decimal>("PriceAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("price_amount");

                    b.Property<DateTime>("RentedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rented_at");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid")
                        .HasColumnName("reservation_id");

                    b.Property<DateTime?>("ReturnedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("returned_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_rentals");

                    b.HasIndex("ReservationId")
                        .HasDatabaseName("ix_rentals_reservation_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_rentals_user_id");

                    b.ToTable("rentals", (string)null);
                });

            modelBuilder.Entity("codex_backend.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("book_item_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CurrencySnapshot")
                        .HasColumnType("text")
                        .HasColumnName("currency_snapshot");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("pickup_date");

                    b.Property<Guid>("PoliciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("policies_id");

                    b.Property<decimal>("PriceAmountSnapshot")
                        .HasColumnType("numeric")
                        .HasColumnName("price_amount_snapshot");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid?>("StorePolicyId")
                        .HasColumnType("uuid")
                        .HasColumnName("store_policy_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reservations");

                    b.HasIndex("BookItemId")
                        .HasDatabaseName("ix_reservations_book_item_id");

                    b.HasIndex("StorePolicyId")
                        .HasDatabaseName("ix_reservations_store_policy_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reservations_user_id");

                    b.ToTable("reservations", (string)null);
                });

            modelBuilder.Entity("codex_backend.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("982b31d7-e26c-442b-9593-d774c107facd"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("d9ebb4d7-d74c-4a63-a296-7910ca646928"),
                            Name = "Client"
                        });
                });

            modelBuilder.Entity("codex_backend.Models.StorePolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookstoreId")
                        .HasColumnType("uuid")
                        .HasColumnName("bookstore_id");

                    b.Property<int>("GracePeriodDays")
                        .HasColumnType("integer")
                        .HasColumnName("grace_period_days");

                    b.Property<decimal>("LateFeePerDay")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("late_fee_per_day");

                    b.Property<int>("MaxRenewals")
                        .HasColumnType("integer")
                        .HasColumnName("max_renewals");

                    b.HasKey("Id")
                        .HasName("pk_store_policy");

                    b.HasIndex("BookstoreId")
                        .HasDatabaseName("ix_store_policy_bookstore_id");

                    b.ToTable("store_policy", (string)null);
                });

            modelBuilder.Entity("codex_backend.Models.StorePolicyPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<int>("DurationInMonths")
                        .HasColumnType("integer")
                        .HasColumnName("duration_in_months");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid>("StorePolicyId")
                        .HasColumnType("uuid")
                        .HasColumnName("store_policy_id");

                    b.HasKey("Id")
                        .HasName("pk_store_policy_price");

                    b.HasIndex("StorePolicyId")
                        .HasDatabaseName("ix_store_policy_price_store_policy_id");

                    b.ToTable("store_policy_price", (string)null);
                });

            modelBuilder.Entity("codex_backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password_Hash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_users_role_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("codex_backend.Models.Book", b =>
                {
                    b.HasOne("codex_backend.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_books_authors_author_id");

                    b.HasOne("codex_backend.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_books_categories_category_id");

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("codex_backend.Models.BookItem", b =>
                {
                    b.HasOne("codex_backend.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_items_books_book_id");

                    b.HasOne("codex_backend.Models.Bookstore", "Bookstore")
                        .WithMany()
                        .HasForeignKey("BookstoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_items_bookstores_bookstore_id");

                    b.Navigation("Book");

                    b.Navigation("Bookstore");
                });

            modelBuilder.Entity("codex_backend.Models.BookReview", b =>
                {
                    b.HasOne("codex_backend.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_reviews_books_book_id");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("codex_backend.Models.Bookstore", b =>
                {
                    b.HasOne("codex_backend.Models.User", "User")
                        .WithMany("Bookstores")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookstores_users_owner_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("codex_backend.Models.Rental", b =>
                {
                    b.HasOne("codex_backend.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rentals_reservations_reservation_id");

                    b.HasOne("codex_backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rentals_users_user_id");

                    b.Navigation("Reservation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("codex_backend.Models.Reservation", b =>
                {
                    b.HasOne("codex_backend.Models.BookItem", "BookItem")
                        .WithMany()
                        .HasForeignKey("BookItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_book_items_book_item_id");

                    b.HasOne("codex_backend.Models.StorePolicy", "StorePolicy")
                        .WithMany()
                        .HasForeignKey("StorePolicyId")
                        .HasConstraintName("fk_reservations_store_policy_store_policy_id");

                    b.HasOne("codex_backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_users_user_id");

                    b.Navigation("BookItem");

                    b.Navigation("StorePolicy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("codex_backend.Models.StorePolicy", b =>
                {
                    b.HasOne("codex_backend.Models.Bookstore", null)
                        .WithMany("Policies")
                        .HasForeignKey("BookstoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_store_policy_bookstores_bookstore_id");
                });

            modelBuilder.Entity("codex_backend.Models.StorePolicyPrice", b =>
                {
                    b.HasOne("codex_backend.Models.StorePolicy", "StorePolicy")
                        .WithMany("Prices")
                        .HasForeignKey("StorePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_store_policy_price_store_policy_store_policy_id");

                    b.Navigation("StorePolicy");
                });

            modelBuilder.Entity("codex_backend.Models.User", b =>
                {
                    b.HasOne("codex_backend.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("codex_backend.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("codex_backend.Models.Bookstore", b =>
                {
                    b.Navigation("Policies");
                });

            modelBuilder.Entity("codex_backend.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("codex_backend.Models.StorePolicy", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("codex_backend.Models.User", b =>
                {
                    b.Navigation("Bookstores");
                });
#pragma warning restore 612, 618
        }
    }
}
